// Queries -- MySQL 
// Tables already given -- 
Assume common tables like:
Employee(emp_id, emp_name, dept_id, salary, join_date)
Department(dept_id, dept_name)
Student(stu_id, stu_name, marks, class_id)
Orders(order_id, customer_id, order_date, amount)
Product(prod_id, prod_name, price, category_id)

// tables creations and inserttions
mysql> use projects;
Database changed
mysql> CREATE TABLE Employee (
    ->     emp_id INT PRIMARY KEY,
    ->     emp_name VARCHAR(50),
    ->     dept_id INT,
    ->     salary DECIMAL(10,2),
    ->     join_date DATE
    -> );
Query OK, 0 rows affected (0.15 sec)

mysql> -- Department Table
mysql> CREATE TABLE Department (
    ->     dept_id INT PRIMARY KEY,
    ->     dept_name VARCHAR(50)
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql> -- Student Table
mysql> CREATE TABLE Student (
    ->     stu_id INT PRIMARY KEY,
    ->     stu_name VARCHAR(50),
    ->     marks INT,
    ->     class_id INT
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql> -- Orders Table
mysql> CREATE TABLE Orders (
    ->     order_id INT PRIMARY KEY,
    ->     customer_id INT,
    ->     order_date DATE,
    ->     amount DECIMAL(10,2)
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql> -- Product Table
mysql> CREATE TABLE Product (
    ->     prod_id INT PRIMARY KEY,
    ->     prod_name VARCHAR(50),
    ->     price DECIMAL(10,2),
    ->     category_id INT
    -> );
Query OK, 0 rows affected (0.04 sec)

mysql> -- Category Table (needed for join with Product)
mysql> CREATE TABLE Category (
    ->     category_id INT PRIMARY KEY,
    ->     category_name VARCHAR(50)
    -> );
Query OK, 0 rows affected (0.04 sec)


mysql> -- Department Data
mysql> INSERT INTO Department VALUES
    -> (10, 'HR'),
    -> (20, 'IT'),
    -> (30, 'Finance'),
    -> (40, 'Sales');
Query OK, 4 rows affected (0.03 sec)
Records: 4  Duplicates: 0  Warnings: 0

mysql>
mysql> -- Employee Data
mysql> INSERT INTO Employee VALUES
    -> (1, 'Alice', 10, 55000, '2023-03-15'),
    -> (2, 'Bob', 20, 75000, '2021-07-10'),
    -> (3, 'Charlie', 20, 45000, '2022-01-05'),
    -> (4, 'David', 30, 60000, '2024-06-20'),
    -> (5, 'Eve', 40, 30000, '2020-09-12'),
    -> (6, 'Frank', NULL, 50000, '2025-01-25');
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql>
mysql> -- Student Data
mysql> INSERT INTO Student VALUES
    -> (101, 'Ravi', 85, 5),
    -> (102, 'Sita', 72, 5),
    -> (103, 'Amit', 55, 10),
    -> (104, 'Neha', 91, 10),
    -> (105, 'Ravi', 67, 8),
    -> (106, 'Anita', 78, 10);
Query OK, 6 rows affected (0.01 sec)
Records: 6  Duplicates: 0  Warnings: 0

mysql>
mysql> -- Orders Data
mysql> INSERT INTO Orders VALUES
    -> (1001, 1, '2025-06-05', 1200),
    -> (1002, 2, '2025-06-15', 3500),
    -> (1003, 3, '2024-12-20', 1500),
    -> (1004, 1, '2025-07-10', 5000),
    -> (1005, 5, '2025-06-25', 2000);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0

mysql>
mysql> -- Category Data
mysql> INSERT INTO Category VALUES
    -> (1, 'Electronics'),
    -> (2, 'Clothing'),
    -> (3, 'Furniture');
Query OK, 3 rows affected (0.01 sec)
Records: 3  Duplicates: 0  Warnings: 0

mysql>
mysql> -- Product Data
mysql> INSERT INTO Product VALUES
    -> (201, 'Samsung Phone', 25000, 1),
    -> (202, 'Sony TV', 50000, 1),
    -> (203, 'Shirt', 1500, 2),
    -> (204, 'Sofa', 20000, 3),
    -> (205, 'Shoes', 3000, 2);
Query OK, 5 rows affected (0.01 sec)
Records: 5  Duplicates: 0  Warnings: 0


// TOPIC : BASIC SELECT & FILTERING -- 

// 1. Write a query to display all employee names and their salaries from the employee table.

mysql> select emp_name, salary from employee;
+----------+----------+
| emp_name | salary   |
+----------+----------+
| Alice    | 55000.00 |
| Bob      | 75000.00 |
| Charlie  | 45000.00 |
| David    | 60000.00 |
| Eve      | 30000.00 |
| Frank    | 50000.00 |
+----------+----------+
6 rows in set (0.00 sec)


// 2. Retrieve all unique department IDs from the Employee table.
mysql> select distinct dept_id from employee;
+---------+
| dept_id |
+---------+
|      10 |
|      20 |
|      30 |
|      40 |
|    NULL |
+---------+
5 rows in set (0.01 sec)


// 3. Display employees whose salary is greater than 50000.
mysql> select * from employee where salary > 50000;
+--------+----------+---------+----------+------------+
| emp_id | emp_name | dept_id | salary   | join_date  |
+--------+----------+---------+----------+------------+
|      1 | Alice    |      10 | 55000.00 | 2023-03-15 |
|      2 | Bob      |      20 | 75000.00 | 2021-07-10 |
|      4 | David    |      30 | 60000.00 | 2024-06-20 |
+--------+----------+---------+----------+------------+
3 rows in set (0.01 sec)


// 4. Fetch employees who joined after '2023-01-01'
mysql> select * from employee where join_date > '2023-01-01';
+--------+----------+---------+----------+------------+
| emp_id | emp_name | dept_id | salary   | join_date  |
+--------+----------+---------+----------+------------+
|      1 | Alice    |      10 | 55000.00 | 2023-03-15 |
|      4 | David    |      30 | 60000.00 | 2024-06-20 |
|      6 | Frank    |    NULL | 50000.00 | 2025-01-25 |
+--------+----------+---------+----------+------------+
3 rows in set (0.01 sec)


// 5. display students who scored marks between 60 and 80.
mysql> select * from Student where marks between 60 and 80;
+--------+----------+-------+----------+
| stu_id | stu_name | marks | class_id |
+--------+----------+-------+----------+
|    102 | Sita     |    72 |        5 |
|    105 | Ravi     |    67 |        8 |
|    106 | Anita    |    78 |       10 |
+--------+----------+-------+----------+
3 rows in set (0.01 sec)

// 6. find all products whose name starts with 'S'.
mysql> select * from product where prod_name like 'S%';
+---------+---------------+----------+-------------+
| prod_id | prod_name     | price    | category_id |
+---------+---------------+----------+-------------+
|     201 | Samsung Phone | 25000.00 |           1 |
|     202 | Sony TV       | 50000.00 |           1 |
|     203 | Shirt         |  1500.00 |           2 |
|     204 | Sofa          | 20000.00 |           3 |
|     205 | Shoes         |  3000.00 |           2 |
+---------+---------------+----------+-------------+
5 rows in set (0.00 sec)

// 7. retrieve employees who do not belong to department 10
mysql> select * from employee where dept_id != 10 or dept_id is null;
+--------+----------+---------+----------+------------+
| emp_id | emp_name | dept_id | salary   | join_date  |
+--------+----------+---------+----------+------------+
|      2 | Bob      |      20 | 75000.00 | 2021-07-10 |
|      3 | Charlie  |      20 | 45000.00 | 2022-01-05 |
|      4 | David    |      30 | 60000.00 | 2024-06-20 |
|      5 | Eve      |      40 | 30000.00 | 2020-09-12 |
|      6 | Frank    |    NULL | 50000.00 | 2025-01-25 |
+--------+----------+---------+----------+------------+
5 rows in set (0.01 sec)

// 8. display all orders placed in June 2025
mysql> select * from orders where month(order_date) = 6 and year(order_date) = 2025;
+----------+-------------+------------+---------+
| order_id | customer_id | order_date | amount  |
+----------+-------------+------------+---------+
|     1001 |           1 | 2025-06-05 | 1200.00 |
|     1002 |           2 | 2025-06-15 | 3500.00 |
|     1005 |           5 | 2025-06-25 | 2000.00 |
+----------+-------------+------------+---------+
3 rows in set (0.01 sec)

mysql>

// 9. Show all employees with dept_id not in 10, 20, 30
mysql> select * from employee where dept_id not in (10, 20, 30) or dept_id is null;
+--------+----------+---------+----------+------------+
| emp_id | emp_name | dept_id | salary   | join_date  |
+--------+----------+---------+----------+------------+
|      5 | Eve      |      40 | 30000.00 | 2020-09-12 |
|      6 | Frank    |    NULL | 50000.00 | 2025-01-25 |
+--------+----------+---------+----------+------------+
2 rows in set (0.01 sec)

// 10. Show all employees with dept_id in 20 or 40
mysql> select * from employee where dept_id in (20,40);
+--------+----------+---------+----------+------------+
| emp_id | emp_name | dept_id | salary   | join_date  |
+--------+----------+---------+----------+------------+
|      2 | Bob      |      20 | 75000.00 | 2021-07-10 |
|      3 | Charlie  |      20 | 45000.00 | 2022-01-05 |
|      5 | Eve      |      40 | 30000.00 | 2020-09-12 |
+--------+----------+---------+----------+------------+
3 rows in set (0.00 sec)



// TOPIC -- SORTING & OPERATORS

// 11. Display top 5 highest-paid employees.
mysql> select emp_name, salary from employee order by salary desc limit 5;
+----------+----------+
| emp_name | salary   |
+----------+----------+
| Bob      | 75000.00 |
| David    | 60000.00 |
| Alice    | 55000.00 |
| Frank    | 50000.00 |
| Charlie  | 45000.00 |
+----------+----------+
5 rows in set (0.00 sec)

// 12. List Students in class 5, ordered by marks (descending).
mysql> select stu_name, marks from student where class_id = 5 order by marks desc;
+----------+-------+
| stu_name | marks |
+----------+-------+
| Ravi     |    85 |
| Sita     |    72 |
+----------+-------+
2 rows in set (0.00 sec)

// 13. Find employees with salary > 40000 and working in department 20.
mysql> select emp_name, dept_id, salary from employee where salary > 40000 and dept_id = 20;
+----------+---------+----------+
| emp_name | dept_id | salary   |
+----------+---------+----------+
| Bob      |      20 | 75000.00 |
| Charlie  |      20 | 45000.00 |
+----------+---------+----------+
2 rows in set (0.00 sec)

// 14. Display employees with salary < 30000 or joined before 2022.
mysql> select emp_name, salary, join_date from employee where salary < 30000 or join_date < '2022-01-01';
+----------+----------+------------+
| emp_name | salary   | join_date  |
+----------+----------+------------+
| Bob      | 75000.00 | 2021-07-10 |
| Eve      | 30000.00 | 2020-09-12 |
+----------+----------+------------+
2 rows in set (0.01 sec)


// TOPIC -- AGGREGATE FUNCTIONS

// 15. find the total salary paid to all employees.
mysql> select sum(salary) as total_salary from employee;
+--------------+
| total_salary |
+--------------+
|    315000.00 |
+--------------+
1 row in set (0.00 sec)

// 16. display the average marks of students in class 10.
mysql> select avg(marks) as average_marks from student where class_id = 10;
+---------------+
| average_marks |
+---------------+
|       74.6667 |
+---------------+
1 row in set (0.01 sec)

mysql>


// 17. find the highest and lowest product price.
mysql> select max(price) as highest_price, min(price) as lowest_price from product;
+---------------+--------------+
| highest_price | lowest_price |
+---------------+--------------+
|      50000.00 |      1500.00 |
+---------------+--------------+
1 row in set (0.00 sec)


// 18. Count how many orders were placed in 2025.
mysql> select count(*) as total_orders from orders where year(order_date) = 2025;
+--------------+
| total_orders |
+--------------+
|            4 |
+--------------+
1 row in set (0.01 sec)


// TOPIC -- GROUP BY & HAVING

// 19. Find department-wise average salary of employees.
1 row in set (0.01 sec)

mysql> select dept_id, avg(salary) as avg_salary from employee group by dept_id;
+---------+--------------+
| dept_id | avg_salary   |
+---------+--------------+
|      10 | 55000.000000 |
|      20 | 60000.000000 |
|      30 | 60000.000000 |
|      40 | 30000.000000 |
|    NULL | 50000.000000 |
+---------+--------------+
5 rows in set (0.01 sec)


// 20. Display number of students in each class.
mysql> select class_id, count(*) as total_students from student group by class_id;
+----------+----------------+
| class_id | total_students |
+----------+----------------+
|        5 |              2 |
|       10 |              3 |
|        8 |              1 |
+----------+----------------+
3 rows in set (0.00 sec)


// 21. Get departments where the average salary is greater than 60,000.

mysql> select dept_id, avg(salary) as avg_salary from employee group by dept_id having avg(salary) > 60000;
Empty set (0.01 sec)

mysql> select dept_id, avg(salary) as avg_salary from employee group by dept_id having avg(salary) > 30000;
+---------+--------------+
| dept_id | avg_salary   |
+---------+--------------+
|      10 | 55000.000000 |
|      20 | 60000.000000 |
|      30 | 60000.000000 |
|    NULL | 50000.000000 |
+---------+--------------+
4 rows in set (0.00 sec)


// 22 . Find duplicate student names in the student table.
mysql> select stu_name, count(*) as occurrences from student group by stu_name having count(*) > 1;
+----------+-------------+
| stu_name | occurrences |
+----------+-------------+
| Ravi     |           2 |
+----------+-------------+
1 row in set (0.00 sec)

// JOINS -- 
// 23. Write a query to display employee names along with their department names
mysql> select e.emp_name, d.dept_name from employee e inner join department d on e.dept_id = d.dept_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Alice    | HR        |
| Bob      | IT        |
| Charlie  | IT        |
| David    | Finance   |
| Eve      | Sales     |
+----------+-----------+
5 rows in set (0.02 sec)


// 24. List all products along with their category name (assume Category table).
mysql> select p.prod_name, c.category_name from product p inner join category c on p.category_id = c.category_id;
+---------------+---------------+
| prod_name     | category_name |
+---------------+---------------+
| Samsung Phone | Electronics   |
| Sony TV       | Electronics   |
| Shirt         | Clothing      |
| Sofa          | Furniture     |
| Shoes         | Clothing      |
+---------------+---------------+
5 rows in set (0.01 sec)


// 25. Display all employees and their orders (Employee-Orders join).
mysql> select e.emp_name, o.order_id, o.amount, o.order_date from employee e inner join orders o on e.emp_id = o.customer_id;
+----------+----------+---------+------------+
| emp_name | order_id | amount  | order_date |
+----------+----------+---------+------------+
| Alice    |     1001 | 1200.00 | 2025-06-05 |
| Bob      |     1002 | 3500.00 | 2025-06-15 |
| Charlie  |     1003 | 1500.00 | 2024-12-20 |
| Alice    |     1004 | 5000.00 | 2025-07-10 |
| Eve      |     1005 | 2000.00 | 2025-06-25 |
+----------+----------+---------+------------+
5 rows in set (0.00 sec)


// 26. Fetch all employees even if they don't have a department assigned (Left join).
mysql> select e.emp_name, d.dept_name from employee e left join department d on e.dept_id = d.dept_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Alice    | HR        |
| Bob      | IT        |
| Charlie  | IT        |
| David    | Finance   |
| Eve      | Sales     |
| Frank    | NULL      |
+----------+-----------+
6 rows in set (0.00 sec)


// 27. Find employees earning more than the average salary.
mysql> select emp_name, salary from employee where salary > (select avg(salary) from employee);
+----------+----------+
| emp_name | salary   |
+----------+----------+
| Alice    | 55000.00 |
| Bob      | 75000.00 |
| David    | 60000.00 |
+----------+----------+
3 rows in set (0.02 sec)

// 28. find 2nd highest salary employee
mysql> select emp_name, salary from employee where salary < (select max(salary) from employee) order by salary desc limit 1;
+----------+----------+
| emp_name | salary   |
+----------+----------+
| David    | 60000.00 |
+----------+----------+
1 row in set (0.00 sec)

// 29. 3rd highest DISTINCT salary
mysql> select emp_name, salary from employee where salary = (select distinct salary from employee order by salary desc limit 1 offset 2);
+----------+----------+
| emp_name | salary   |
+----------+----------+
| Alice    | 55000.00 |
+----------+----------+
1 row in set (0.00 sec)

// 30. Display the student(s) who scored the highest marks in each class.
mysql> select s1.stu_id, s1.stu_name, s1.class_id, s1.marks from student s1 where s1.marks = (select max(s2.marks) from student s2 where s2.class_id = s1.class_id);
+--------+----------+----------+-------+
| stu_id | stu_name | class_id | marks |
+--------+----------+----------+-------+
|    101 | Ravi     |        5 |    85 |
|    104 | Neha     |       10 |    91 |
|    105 | Ravi     |        8 |    67 |
+--------+----------+----------+-------+
3 rows in set (0.00 sec)

mysql>

// 31. Find the employee(s) with the second highest salary.
mysql> select emp_name, salary from employee order by salary desc limit 1 offset 1;
+----------+----------+
| emp_name | salary   |
+----------+----------+
| David    | 60000.00 |
+----------+----------+
1 row in set (0.00 sec)

// 32. mysql> select prod_name, price from product where price > (select avg(price) from product);
+---------------+----------+
| prod_name     | price    |
+---------------+----------+
| Samsung Phone | 25000.00 |
| Sony TV       | 50000.00 |
| Sofa          | 20000.00 |
+---------------+----------+
3 rows in set (0.01 sec)


// 33 . Retrieve the 3 most recent orders.
mysql> select order_id, customer_id, order_date, amount from orders order by order_date desc limit 3;
+----------+-------------+------------+---------+
| order_id | customer_id | order_date | amount  |
+----------+-------------+------------+---------+
|     1004 |           1 | 2025-07-10 | 5000.00 |
|     1005 |           5 | 2025-06-25 | 2000.00 |
|     1002 |           2 | 2025-06-15 | 3500.00 |
+----------+-------------+------------+---------+
3 rows in set (0.00 sec)

mysql>


// extras --- 

// joins 
// inner join - matching records only 

mysql> SELECT e.emp_name, d.dept_name
    -> FROM Employee e
    -> INNER JOIN Department d ON e.dept_id = d.dept_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Alice    | HR        |
| Bob      | IT        |
| Charlie  | IT        |
| David    | Finance   |
| Eve      | Sales     |
+----------+-----------+
5 rows in set (0.00 sec)

// left join -- all left table rows(employees) even if no department 
mysql> select e.emp_name, d.dept_name from employee e left join department d on d.dept_id = e.dept_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Alice    | HR        |
| Bob      | IT        |
| Charlie  | IT        |
| David    | Finance   |
| Eve      | Sales     |
| Frank    | NULL      |
+----------+-----------+
6 rows in set (0.00 sec)

// right join - all depts, even if no employees
mysql> select e.emp_name, d.dept_name from employee e right join department d on d.dept_id = e.dept_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Alice    | HR        |
| Charlie  | IT        |
| Bob      | IT        |
| David    | Finance   |
| Eve      | Sales     |
+----------+-----------+
5 rows in set (0.00 sec)


// full join - all depts, + all employees (not direct but with union )
mysql> select e.emp_name, d.dept_name from employee e left join department d on e.dept_id = d.dept_id
    -> union
    -> select e.emp_name, d.dept_name from employee e right join department d on e.dept_id = d.dept_id;
+----------+-----------+
| emp_name | dept_name |
+----------+-----------+
| Alice    | HR        |
| Bob      | IT        |
| Charlie  | IT        |
| David    | Finance   |
| Eve      | Sales     |
| Frank    | NULL      |
+----------+-----------+
6 rows in set (0.00 sec)


// GROUP BY --- 
// department wise total salary 
mysql> select dept_id, sum(salary) as total_salary from employee group by dept_id;
+---------+--------------+
| dept_id | total_salary |
+---------+--------------+
|      10 |     55000.00 |
|      20 |    120000.00 |
|      30 |     60000.00 |
|      40 |     30000.00 |
|    NULL |     50000.00 |
+---------+--------------+
5 rows in set (0.01 sec)


// class wise student count
mysql> select class_id, count(*) as total_students from student group by class_id;
+----------+----------------+
| class_id | total_students |
+----------+----------------+
|        5 |              2 |
|       10 |              3 |
|        8 |              1 |
+----------+----------------+
3 rows in set (0.00 sec)

// HAVING - works same like where but on groups
// depts where avg salary > 60000
mysql> select dept_id, avg(salary) as avg_salary from employee group by dept_id having avg(salary) > 60000;
Empty set (0.00 sec)


// class with more than 5 students
mysql> select class_id, count(*) as total_students from student group by class_id having count(*) > 5;
Empty set (0.00 sec)

mysql> select class_id, count(*) as total_students from student group by class_id having count(*) > 2;
+----------+----------------+
| class_id | total_students |
+----------+----------------+
|       10 |              3 |
+----------+----------------+
1 row in set (0.00 sec)

// order by 
// employees sorted by salary descending
mysql> select emp_name, salary from employee order by salary desc;
+----------+----------+
| emp_name | salary   |
+----------+----------+
| Bob      | 75000.00 |
| David    | 60000.00 |
| Alice    | 55000.00 |
| Frank    | 50000.00 |
| Charlie  | 45000.00 |
| Eve      | 30000.00 |
+----------+----------+
6 rows in set (0.00 sec)


// top 3 expensive products
mysql> select prod_name, price from product order by price desc limit 3;
+---------------+----------+
| prod_name     | price    |
+---------------+----------+
| Sony TV       | 50000.00 |
| Samsung Phone | 25000.00 |
| Sofa          | 20000.00 |
+---------------+----------+
3 rows in set (0.00 sec)

// DISTINCT KEYWORD -- unique values
mysql> select distinct dept_id from employee;
+---------+
| dept_id |
+---------+
|      10 |
|      20 |
|      30 |
|      40 |
|    NULL |
+---------+
5 rows in set (0.00 sec)

// BETWEEN -- range filter
mysql> select emp_name, salary from employee where salary between 40000 and 60000;
+----------+----------+
| emp_name | salary   |
+----------+----------+
| Alice    | 55000.00 |
| Charlie  | 45000.00 |
| David    | 60000.00 |
| Frank    | 50000.00 |
+----------+----------+
4 rows in set (0.00 sec)

// LIKE -- pattern matching
SELECT emp_name
FROM Employee
WHERE emp_name LIKE 'A%';   -- starts with A

// IN - multiple values
SELECT emp_name
FROM Employee
WHERE dept_id IN (10, 20, 30);

 // aggregate functions -- 
SELECT COUNT(*) AS total_orders, SUM(amount) AS total_sales
FROM Orders;





// not read this just copied -- this part of views & indexes and some functions
✅ 1. Views

Create a view of employees earning more than 60,000

CREATE VIEW HighSalaryEmployees AS
SELECT emp_id, emp_name, salary, dept_id
FROM Employee
WHERE salary > 60000;

Use the view
SELECT * FROM HighSalaryEmployees;

Drop a view
DROP VIEW HighSalaryEmployees;

✅ 2. Indexes
Indexes speed up searches but slow down inserts/updates a little.

Create index on salary column
CREATE INDEX idx_salary ON Employee(salary);


Create unique index
CREATE UNIQUE INDEX idx_emp_id ON Employee(emp_id);


Drop index
DROP INDEX idx_salary ON Employee;


👉 In placements, mostly asked as theory Q:
Index = improves performance of SELECT queries.
Primary Key automatically creates a unique clustered index.

✅ 3. String Functions
Convert name to uppercase
SELECT UPPER(emp_name) AS upper_name FROM Employee;

Convert to lowercase
SELECT LOWER(emp_name) AS lower_name FROM Employee;

Concatenate first + last name (assuming columns)
SELECT CONCAT(first_name, ' ', last_name) AS full_name FROM Employee;

Length of a string
SELECT emp_name, LENGTH(emp_name) AS name_length FROM Employee;

Substring (first 3 chars of name)
SELECT SUBSTRING(emp_name, 1, 3) AS short_name FROM Employee;

Replace part of a string
SELECT REPLACE(emp_name, 'a', '@') FROM Employee;

✅ 4. Date Functions

Current date and time

SELECT NOW();        -- full datetime
SELECT CURDATE();    -- only date
SELECT CURTIME();    -- only time


Extract year, month, day

SELECT YEAR(join_date) AS year_joined,
       MONTH(join_date) AS month_joined,
       DAY(join_date) AS day_joined
FROM Employee;


Find difference between two dates

SELECT DATEDIFF('2025-09-16', '2025-06-01') AS days_difference;


Add/Subtract intervals

SELECT DATE_ADD(CURDATE(), INTERVAL 10 DAY) AS future_date;
SELECT DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AS last_month;

✅ 5. Aggregate Functions Recap

COUNT() → number of rows

SUM() → total

AVG() → average

MAX() → maximum

MIN() → minimum

Example:

SELECT COUNT(*) AS total_emp,
       SUM(salary) AS total_salary,
       AVG(salary) AS avg_salary,
       MAX(salary) AS max_salary,
       MIN(salary) AS min_salary
FROM Employee;